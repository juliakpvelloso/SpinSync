{"ast":null,"code":"var _jsxFileName = \"/Users/juliavelloso/PersonalProjects/spinsync/src/components/Playlists.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport '../styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Playlists = () => {\n  _s();\n  const [playlists, setPlaylists] = useState([]);\n  useEffect(() => {\n    // Fetch playlists from the backend\n    fetch('/playlists').then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to fetch playlists');\n      }\n      return response.json();\n    }).then(data => setPlaylists(data)).catch(error => console.error('Error:', error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"playlists-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Your Playlists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Select a playlist to get started\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: playlists.map(playlist => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: playlist.image || 'default-placeholder-image.jpg' // Fallback image\n          ,\n          alt: playlist.name,\n          className: \"playlist-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"playlist-name\",\n          children: playlist.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this)]\n      }, playlist.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(Playlists, \"/7UASZ0pXGZcrJioajU839hHwfM=\");\n_c = Playlists;\nexport default Playlists;\nvar _c;\n$RefreshReg$(_c, \"Playlists\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Playlists","_s","playlists","setPlaylists","fetch","then","response","ok","Error","json","data","catch","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","playlist","src","image","alt","name","id","_c","$RefreshReg$"],"sources":["/Users/juliavelloso/PersonalProjects/spinsync/src/components/Playlists.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport '../styles.css';\n\nconst Playlists = () => {\n  const [playlists, setPlaylists] = useState([]);\n\n  useEffect(() => {\n    // Fetch playlists from the backend\n    fetch('/playlists')\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Failed to fetch playlists');\n        }\n        return response.json();\n      })\n      .then((data) => setPlaylists(data))\n      .catch((error) => console.error('Error:', error));\n  }, []);\n\n  return (\n    <div className=\"playlists-container\">\n      <h1>Your Playlists</h1>\n      <p>Select a playlist to get started</p>\n      <div className=\"grid-container\">\n        {playlists.map((playlist) => (\n          <div key={playlist.id} className=\"grid-item\">\n            <img\n              src={playlist.image || 'default-placeholder-image.jpg'} // Fallback image\n              alt={playlist.name}\n              className=\"playlist-image\"\n            />\n            <p className=\"playlist-name\">{playlist.name}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Playlists;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd;IACAQ,KAAK,CAAC,YAAY,CAAC,CAChBC,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAC9C;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,IAAKP,YAAY,CAACO,IAAI,CAAC,CAAC,CAClCC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC,CAAC;EACrD,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEb,OAAA;IAAKe,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAClChB,OAAA;MAAAgB,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBpB,OAAA;MAAAgB,QAAA,EAAG;IAAgC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACvCpB,OAAA;MAAKe,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAC5Bb,SAAS,CAACkB,GAAG,CAAEC,QAAQ,iBACtBtB,OAAA;QAAuBe,SAAS,EAAC,WAAW;QAAAC,QAAA,gBAC1ChB,OAAA;UACEuB,GAAG,EAAED,QAAQ,CAACE,KAAK,IAAI,+BAAgC,CAAC;UAAA;UACxDC,GAAG,EAAEH,QAAQ,CAACI,IAAK;UACnBX,SAAS,EAAC;QAAgB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3B,CAAC,eACFpB,OAAA;UAAGe,SAAS,EAAC,eAAe;UAAAC,QAAA,EAAEM,QAAQ,CAACI;QAAI;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GANxCE,QAAQ,CAACK,EAAE;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOhB,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAClB,EAAA,CAlCID,SAAS;AAAA2B,EAAA,GAAT3B,SAAS;AAoCf,eAAeA,SAAS;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}